diff --git a/CMakeLists.txt b/CMakeLists.txt
index c782fb7..849b38a 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -39,10 +39,35 @@ cmake_minimum_required(VERSION 2.6)
 
 project(freetype)
 
-set(VERSION_MAJOR "2")
-set(VERSION_MINOR "5")
-set(VERSION_PATCH "2")
+# Get major version
+file(STRINGS ${PROJECT_SOURCE_DIR}/include/freetype.h line
+  REGEX "^#define *FREETYPE_MAJOR"
+)
+# message(STATUS "line = ${line}.")
+string(REGEX REPLACE "#define *FREETYPE_MAJOR *" "" val "${line}")
+# message(STATUS "val = ${val}.")
+set(VERSION_MAJOR "${val}")
+
+# Get minor version
+file(STRINGS ${PROJECT_SOURCE_DIR}/include/freetype.h line
+  REGEX "^#define *FREETYPE_MINOR"
+)
+# message(STATUS "line = ${line}.")
+string(REGEX REPLACE "#define *FREETYPE_MINOR *" "" val "${line}")
+# message(STATUS "val = ${val}.")
+set(VERSION_MINOR "${val}")
+
+# Get patch
+file(STRINGS ${PROJECT_SOURCE_DIR}/include/freetype.h line
+  REGEX "^#define *FREETYPE_PATCH"
+)
+# message(STATUS "line = ${line}.")
+string(REGEX REPLACE "#define *FREETYPE_PATCH *" "" val "${line}")
+# message(STATUS "val = ${val}.")
+set(VERSION_PATCH "${val}")
+
 set(PROJECT_VERSION ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH})
+message(STATUS "PROJECT_VERSION = ${PROJECT_VERSION}.")
 
 # Compiler definitions for building the library
 add_definitions(-DFT2_BUILD_LIBRARY)
@@ -50,18 +75,24 @@ add_definitions(-DFT2_BUILD_LIBRARY)
 # Specify library include directories
 include_directories("${PROJECT_SOURCE_DIR}/include")
 
-# Create the configuration file
+# Create the include directory for created headers
 message(STATUS "Creating directory, ${PROJECT_BINARY_DIR}/include.")
 file(MAKE_DIRECTORY ${PROJECT_BINARY_DIR}/include)
-
-# For the auto-generated ftconfig.h file
 include_directories("${PROJECT_BINARY_DIR}/include")
+
+# Create the auto-generated ftconfig.h file
 message(STATUS "Creating ${PROJECT_BINARY_DIR}/include/ftconfig.h.")
-execute_process(
-  COMMAND sed -e "s/FT_CONFIG_OPTIONS_H/<ftoption.h>/" -e "s/FT_CONFIG_STANDARD_LIBRARY_H/<ftstdlib.h>/" -e "s?/undef ?#undef ?"
-  INPUT_FILE ${PROJECT_SOURCE_DIR}/builds/unix/ftconfig.in
-  OUTPUT_FILE ${PROJECT_BINARY_DIR}/include/ftconfig.h
+file(READ ${PROJECT_SOURCE_DIR}/builds/unix/ftconfig.in ftconfig)
+string(REPLACE "FT_CONFIG_OPTIONS_H" "<ftoption.h>"
+  ftconfig "${ftconfig}"
+)
+string(REPLACE "FT_CONFIG_STANDARD_LIBRARY_H" "<ftstdlib.h>"
+  ftconfig "${ftconfig}"
+)
+string(REPLACE "/undef " "#undef "
+  ftconfig "${ftconfig}"
 )
+file(WRITE ${PROJECT_BINARY_DIR}/include/ftconfig.h "${ftconfig}")
 
 set(BASE_SRCS
   src/autofit/autofit.c
@@ -125,7 +156,46 @@ include_directories("src/raster")
 include_directories("src/psaux")
 include_directories("src/psnames")
 
-add_library(freetype ${BASE_SRCS})
+if (WIN32)
+  if (BUILD_SHARED_LIBS)
+# freetype has no declspec stuff
+    message(WARNING "Ignoring BUILD_SHARED_LIBS.  Must be built static on Windows.")
+  endif ()
+  add_library(freetype STATIC ${BASE_SRCS})
+else ()
+  add_library(freetype ${BASE_SRCS})
+endif ()
+if (BUILD_SHARED_LIBS)
+  set_target_properties(freetype PROPERTIES
+    SOVERSION ${VERSION_MAJOR}.${VERSION_MINOR}
+    VERSION ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}
+    COMPILE_DEFINITIONS freetype_EXPORTS
+  )
+endif ()
+
+# Create the configure file
+if (UNIX)
+  set(enable_shared)
+  if (BUILD_SHARED_LIBS)
+    set(enable_shared "yes")
+  endif ()
+  execute_process(COMMAND mkdir -p ${PROJECT_BINARY_DIR}/builds/unix)
+  execute_process(
+    COMMAND sed -e "s?%prefix%?@CMAKE_INSTALL_PREFIX@?g"
+      -e "s?%exec_prefix%?@CMAKE_INSTALL_PREFIX@/bin?g"
+      -e "s?%exec_prefix_set%?no?g"
+      -e "s?%includedir%?@CMAKE_INSTALL_PREFIX@/include?g"
+      -e "s?%libdir%?@CMAKE_INSTALL_PREFIX@/lib?g"
+      -e "s?%build_libtool_libs%?@enable_shared@?g"
+    INPUT_FILE ${PROJECT_SOURCE_DIR}/builds/unix/freetype-config.in
+    OUTPUT_FILE ${PROJECT_BINARY_DIR}/builds/unix/freetype-config-cmake.in
+  )
+  configure_file(${PROJECT_BINARY_DIR}/builds/unix/freetype-config-cmake.in
+    builds/unix/freetype-config
+    @ONLY
+  )
+  execute_process(COMMAND chmod 775 builds/unix/freetype-config)
+endif ()
 
 # Installations
 # Note the trailing slash in the argument to the `DIRECTORY' directive
@@ -138,6 +208,11 @@ install(TARGETS freetype
   LIBRARY DESTINATION lib
   ARCHIVE DESTINATION lib
 )
+if (UNIX)
+  install(PROGRAMS ${PROJECT_BINARY_DIR}/builds/unix/freetype-config
+    DESTINATION bin
+  )
+endif ()
 
 # Packaging
 # CPack version numbers for release tarball name.
diff --git a/README.git b/README.git
index 021c121..e51e55c 100644
--- a/README.git
+++ b/README.git
@@ -30,9 +30,11 @@ configure script is necessary at all; saying
 
 should work on all platforms which have GNU make (or makepp).
 
+CMAKE builds
 
-Similarly, a  build with  `cmake' can  be done  directly from  the git
-repository.
+Configure with, e.g.,
+
+cmake -DCMAKE_INSTALL_PREFIX:PATH=/contrib/freetype-2.5.2a-sersh   -DCMAKE_BUILD_TYPE:STRING=RelWithDebInfo   -DCMAKE_COLOR_MAKEFILE:BOOL=FALSE   -DCMAKE_VERBOSE_MAKEFILE:BOOL=TRUE   -DBUILD_SHARED_LIBS:BOOL=TRUE ..
 
 
 ----------------------------------------------------------------------
